/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controllers;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import models.Customer;
import models.CustomerFeastOrder;
import models.Feast;
import models.I_List;
import utils.Utils;

/**
 *
 * @author ADMIN
 */
public class CustomerFeastOrderList extends ArrayList<Customer> implements I_List {

    @Override
    public boolean create() {
        boolean check = false;
        try {
            boolean checkDupliate = true;
            boolean continous = true;
            Customer customer = new Customer();
            do {
                do {
                    String code = Utils.getString("Input customer Code: ");
                    if (Utils.isValidCode(code)) {
                        customer.setCode(code.toUpperCase());
                        continous = false;
                    }
                } while (continous);
                if (this.indexOf(new CustomerFeastOrder(customer, null, 0, null)) == -1) {
                    checkDupliate = false;
                }
            } while (checkDupliate);
            //input name
            continous = true;
            do {
                String name = Utils.getString("Input student name: ");
                if (name.length() > 1 && name.length() < 24) {
                    customer.setName(name);
                    continous = false;
                }
            } while (continous);
            //phone 
            continous = true;
            do {
                String phone = Utils.getString("Input student phone: ");
                if (Utils.isValidPhone(phone)) {
                    customer.setPhone(phone);
                    continous = false;
                }
            } while (continous);
            //email
            continous = true;
            do {
                String email = Utils.getString("Input student email: ");
                if (Utils.isValidEmail(email)) {
                    customer.setEmail(email);
                    continous = false;
                }
            } while (continous);

//            ArrayList<Object> listSetCode = Utils.readObjectFromFile("FeastMenu.csv");
//            continous = true;
//            String setCode = "";
//            String price = "";
//            String name = "";
//            do {
//                setCode = Utils.getString("Input menu code: ");
//                int index = listSetCode.indexOf(new Feast(setCode)); // Tìm kiếm Feast bằng codeOfSetMenu
//
//                if (index != -1) { // Nếu tìm thấy
//                    Feast foundFeast = (Feast) listSetCode.get(index); // Ép kiểu về Feast
//                    name = foundFeast.getName();
//                    price = foundFeast.getPrice(); // Lấy giá
//                    System.out.println("Menu Code: " + setCode + " | Name: " + name + "  | Price: " + price);
//                    continous = false;
//                } else {
//                    System.out.println("Invalid menu code! Please try again.");
//                }
//            } while (continous);
            this.add(new CustomerFeastOrder(customer));
            check = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return check;
    }

    @Override
    public boolean update(String code) {
        boolean check = false;
        try {
            Customer fakeCustomer = new Customer();
            fakeCustomer.setCode(code.toUpperCase());
            CustomerFeastOrder stm = new CustomerFeastOrder(fakeCustomer, null, 0, null);
            // Tìm kiếm CustomerFeastOrder với Code tương ứng
            int index = this.indexOf(stm);
            if (index != -1) { // Nếu tìm thấy đối tượng
                CustomerFeastOrder cfo = this.get(index); // Lấy đối tượng stc đem đi check bằng index
                System.out.println("Found CustomerFeastOrder: ");
                System.out.println("-----------------------------------------------------------------------------------");
                System.out.println("Customer Code | Name                 | Phone        | Email                        ");
                System.out.println("-----------------------------------------------------------------------------------");
                System.out.println(cfo.toString());
                System.out.println("-----------------------------------------------------------------------------------");

                // Bắt đầu cập nhật thông tin
                Customer customer = cfo.getCustomer();

                String newName = Utils.updateString("Enter new name: ", customer.getName());
                customer.setName(newName);

                String newPhone;
                do {
                    newPhone = Utils.updateString("Enter new phone: ", customer.getPhone());
                    if (newPhone.isEmpty() || Utils.isValidPhone(newPhone)) {
                        break;
                    }
                    System.out.println("Invalid phone number. Please try again.");
                } while (true);
                if (!newPhone.isEmpty()) {
                    customer.setPhone(newPhone);
                }

                String newEmail;
                do {
                    newEmail = Utils.updateString("Enter new email: ", customer.getEmail());
                    if (newEmail.isEmpty() || Utils.isValidEmail(newEmail)) {
                        break;
                    }
                    System.out.println("Invalid email format. Please try again.");
                } while (true);
                if (!newEmail.isEmpty()) {
                    customer.setEmail(newEmail);
                }
                // Thay đổi đã lưu vào danh sách
                this.set(index, cfo);
                check = true;
                System.out.println("Update successful!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return check;
    }

    @Override
    public void display() {
//        
        try {
            ArrayList<Object> listSetCode = Utils.readObjectFromFile("FeastMenu.csv"); // Đọc dữ liệu từ file CSV
            if (listSetCode.isEmpty()) {
                System.out.println("No data found in FeastMenu.csv!");
                return;
            }
            // Ép kiểu về danh sách Feast
            ArrayList<Feast> feastList = new ArrayList<>();
            for (Object obj : listSetCode) {
                if (obj instanceof Feast) {
                    feastList.add((Feast) obj);
                }
            }

            // Sắp xếp danh sách bằng Bubble Sort
            int n = feastList.size();
            for (int i = 0; i < n - 1; i++) {
                for (int j = 0; j < n - i - 1; j++) {
                    int price1 = Integer.parseInt(feastList.get(j).getPrice());
                    int price2 = Integer.parseInt(feastList.get(j + 1).getPrice());
                    if (price1 > price2) { // Nếu giá lớn hơn thì hoán đổi vị trí
                        Feast temp = feastList.get(j);
                        feastList.set(j, feastList.get(j + 1));
                        feastList.set(j + 1, temp);
                    }
                }
            }

            System.out.println("--------------------------------------------------------------");
            System.out.println("List of Set Menus for ordering party: ");
            System.out.println("--------------------------------------------------------------");

            for (Feast feast : feastList) {
//                if (obj instanceof Feast) {
//                    Feast feast = (Feast) obj;
//                    System.out.printf("| %-10s | %-18s | %-7s | %-15s |\n",
//                            feast.getCodeOfSetMenu(),
//                            feast.getName(),
//                            feast.getPrice(),
//                            feast.getDescription());
                System.out.println(feast.toStringOfMenu());
                String ingredients = feast.getIngrediends();
                String[] ingredientLines = ingredients.split("#\\+");

                System.out.println("Ingredients:");
                for (String line : ingredientLines) {
                    if (!line.trim().isEmpty()) { // Bỏ qua dòng trống
                        System.out.println("+ " + line.trim());
                    }
                }
                System.out.println("--------------------------------------------------------------");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Object> search(String name) {
        List<Object> newList = new ArrayList<>();
        try {
            for (CustomerFeastOrder stm : this) { // Duyệt tất cả các phần từ có trong danh sách this "StudentMountain"
                if (stm.getCustomer() != null && stm.getCustomer().getName().toUpperCase().contains(name.toUpperCase())) {
                    newList.add(stm);
                }
            }

        } catch (Exception e) {
        }
        return newList;

    }

    @Override
    public boolean saveToFile() {
        boolean check = false;
        try {
            Utils.writeListObjectToFile("customerFeastOrderList.bin", this);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return check;
    }

//    @Override
//    public boolean placeFeastOrder(String code) {
//        boolean check = false;
//        try {
//            // Tìm kiếm khách hàng
//            Customer customer = getCustomerByCode(code);
//            if (customer == null) {
//                System.out.println("Customer not found! Please register first.");
//                return false;
//            }
//
//            // Tìm kiếm đơn hàng của khách hàng trong danh sách
//            CustomerFeastOrder cfo = new CustomerFeastOrder(customer, null, 0, null);
//            int index = this.indexOf(cfo);
//            if (index == -1) {
//                System.out.println("Customer order not found in list.");
//                return false;
//            }
//
//            // Đọc danh sách thực đơn từ file
//            ArrayList<Object> listSetCode = Utils.readObjectFromFile("FeastMenu.csv");
//            if (listSetCode.isEmpty()) {
//                System.out.println("No set menu available!");
//                return false;
//            }
//
//            // Nhập mã thực đơn hợp lệ
//            Feast feast = null;
//            String setCode;
//            do {
//                setCode = Utils.getString("Input the code of set menu: ").toUpperCase();
//
//                // Tạo đối tượng giả để tìm kiếm trong danh sách
//                Feast fakeFeast = new Feast(setCode, "", "0", "");
//                index = listSetCode.indexOf(fakeFeast);
//
//                if (index != -1) {
//                    feast = (Feast) listSetCode.get(index);
//                } else {
//                    System.out.println("Invalid menu code! Please try again.");
//                }
//
//            } while (feast == null);
//
//            // Nhập số bàn hợp lệ
//            int numOfTable = Utils.getInt("Input number of tables: ", 1, 10);
//
//            // Nhập ngày tổ chức hợp lệ
//            Date eventDate;
//            do {
//                eventDate = Utils.inputDate("Input the date which customer wants to hold the feast: ");
//                if (eventDate.before(new Date())) {
//                    System.out.println("Invalid date! The event date must be in the future.");
//                } else {
//                    break;
//                }
//            } while (true);
//
////            // Kiểm tra trùng lặp đơn hàng
////            for (CustomerFeastOrder order : this) {
////                if (order.getCustomer().getCode().equalsIgnoreCase(code)
////                        && order.getCodeOfSetMenu().equalsIgnoreCase(setCode)
////                        && order.getDate().equals(eventDate)) {
////                    System.out.println("Duplicate order detected! This feast order already exists.");
////                    return false;
////                }
////            }
//
//            // Cập nhật đơn hàng
//            cfo = this.get(index);
//            cfo.setCodeOfSetMenu(setCode);
//            cfo.setNumOfTable(numOfTable);
//            cfo.setDate(eventDate);
//            this.set(index, cfo);
//
//            // 7 Tạo mã đơn hàng tự động (Order ID)
//            String orderId = generateOrderID();
//
//            // Hiển thị thông tin đặt tiệc
//            DecimalFormat formatter = new DecimalFormat("#,###,###");
//            int totalCost = Integer.parseInt(feast.getPrice()) * numOfTable;
//            String formattedCost = formatter.format(totalCost);
//
//            System.out.println("\n----------------------------------------------------------------");
//            System.out.println("Customer order information [Order ID: " + orderId + "]");
//            System.out.println("----------------------------------------------------------------");
//            System.out.println("Customer Code : " + cfo.getCustomer().getCode());
//            System.out.println("Customer Name : " + cfo.getCustomer().getName());
//            System.out.println("Phone Number  : " + cfo.getCustomer().getPhone());
//            System.out.println("Email         : " + cfo.getCustomer().getEmail());
//            System.out.println("----------------------------------------------------------------");
//            System.out.println("Set Menu Code : " + setCode);
//            System.out.println("Set Menu Name : " + feast.getName());
//            System.out.println("Event Date    : " + Utils.formatDate(eventDate));
//            System.out.println("Number of Tables: " + numOfTable);
//            System.out.println("Price per Table : " + feast.getPrice() + " VND");
//            System.out.println("----------------------------------------------------------------");
//            System.out.println("Total Cost    : " + formattedCost + " VND");
//            System.out.println("----------------------------------------------------------------");
//
//            check = true;
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return check;
//    }
//    @Override
//    public List<Object> placeFeastOrder(String customerCode) {
//        List<Object> newList = new ArrayList<>();
//        List<String> checkedOrders = new ArrayList<>();  // Lưu đơn hàng đã đặt
//
//        try {
//            // 1. Kiểm tra khách hàng có trong danh sách không
//            Customer customer = getCustomerByCode(customerCode);
//            if (customer == null) {
//                System.out.println("Customer not found! Please register first.");
//                return newList;
//            }
//
//            // 2. Đọc danh sách SetMenu từ file
//            ArrayList<Object> feastList = Utils.readObjectFromFile("FeastMenu.csv");
//            if (feastList == null || feastList.isEmpty()) {
//                System.out.println("No set menu available!");
//                return newList;
//            }
//
//            // 3. Nhập mã SetMenu hợp lệ
//            Feast feast = null;
//            String setCode;
//            do {
//                setCode = Utils.getString("Enter the code of set menu: ").toUpperCase();
//
//                // Tạo đối tượng giả để tìm kiếm trong danh sách
//                Feast fakeFeast = new Feast(setCode, "", "0", "");
//                int index = feastList.indexOf(fakeFeast); // Tìm vị trí trong danh sách
//
//                // Kiểm tra nếu tìm thấy
//                if (index != -1) {
//                    feast = (Feast) feastList.get(index);
//                } else {
//                    System.out.println("Invalid menu code! Please try again.");
//                }
//
//            } while (feast == null);
//
//            // 4. Nhập số bàn hợp lệ
//            int numOfTable = Utils.getInt("Enter number of tables: ", 1, 10);
//
//            // 5. Nhập ngày tổ chức hợp lệ
//            Date eventDate;
//            do {
//                eventDate = Utils.inputDate("Enter the event date (dd-MM-yyyy): ");
//                if (eventDate.before(new Date())) {
//                    System.out.println("Invalid date! The event date must be in the future.");
//                } else {
//                    break;
//                }
//            } while (true);
//
//            // 6. Tạo chuỗi để kiểm tra trùng lặp
//            String orderKey = customerCode + "|" + setCode + "|" + Utils.formatDate(eventDate);
//
//            // 7. Kiểm tra trùng lặp bằng `contains()`
//            if (checkedOrders.contains(orderKey)) {
//                System.out.println("Duplicate order detected! This feast order already exists.");
//                return newList;  // Trả về danh sách rỗng nếu đơn hàng bị trùng
//            }
//
//            // 8. Tạo mã đơn hàng tự động
//            String orderId = generateOrderID();
//
//            // 9. Tính tổng chi phí
//            DecimalFormat formatter = new DecimalFormat("#,###,###");
//            int totalCost = Integer.parseInt(feast.getPrice()) * numOfTable;
//            String formattedCost = formatter.format(totalCost);
//
//            // 10. Thêm đơn hàng vào danh sách
//            CustomerFeastOrder order = new CustomerFeastOrder(customer, setCode, numOfTable, eventDate);
//            newList.add(order);
//
//            // 11. Hiển thị thông tin đặt tiệc
//            System.out.println("\n----------------------------------------------------------------");
//            System.out.println("Customer order information [Order ID: " + orderId + "]");
//            System.out.println("----------------------------------------------------------------");
//            System.out.println("Code : " + customer.getCode());
//            System.out.println("Customer name : " + customer.getName());
//            System.out.println("Phone number : " + customer.getPhone());
//            System.out.println("Email : " + customer.getEmail());
//            System.out.println("----------------------------------------------------------------");
//            System.out.println("Code of Set Menu: " + setCode);
//            System.out.println("Set menu name : " + feast.getName());
//            System.out.println("Event date : " + Utils.formatDate(eventDate));
//            System.out.println("Number of tables: " + numOfTable);
//            System.out.println("Price per table : " + feast.getPrice() + " VND");
//            System.out.println("----------------------------------------------------------------");
//            System.out.println("Total cost : " + formattedCost + " VND");
//            System.out.println("----------------------------------------------------------------");
//
//            // 12. Lưu đơn hàng vào danh sách kiểm tra
//            checkedOrders.add(orderKey);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return newList;
//    }
//
//    private boolean isDupliOrder(String customerCode, String menuCode, Date date) {
//        for (CustomerFeastOrder i : this) {  // Duyệt qua danh sách đặt tiệc
//            if (i.getCustomer().getCode().equalsIgnoreCase(customerCode) // Kiểm tra mã khách hàng
//                    && i.getCodeOfSetMenu().equalsIgnoreCase(menuCode) // Kiểm tra mã thực đơn
//                    && i.getDate().equals(date)) {  // Kiểm tra ngày tổ chức tiệc
//                return true; // Trùng lặp
//            }
//        }
//        return false; // Không trùng lặp
//    }
//
//    Customer getCustomerByCode(String customerCode) {
//        Customer fakeCustomer = new Customer();
//        fakeCustomer.setCode(customerCode.toUpperCase());
//
//        CustomerFeastOrder fakeOrder = new CustomerFeastOrder(fakeCustomer, null, 0, null);
//
//        // Tìm vị trí của đơn hàng trong danh sách
//        int index = this.indexOf(fakeOrder);
//
//        // Nếu không tìm thấy, trả về null
//        if (index == -1) {
//            return null;
//        }
//
//        // Trả về khách hàng từ danh sách
//        return this.get(index).getCustomer();
//    }
//
//    private String generateOrderID() {
//        return "ORD" + (this.size() + 1);
//    }
}
